{"pages":[],"posts":[{"title":"BFC란무엇인가","text":"BLOCK FORMATTING CONTEXT (BFC)BFC란 용어는 들어보지 못했어도 아마 html/css로 레이아웃 작성을 해봤다면 이미 BFC의 원리는 알고 있을 가능성이 크다. normal flow일단 html에 작성된 요소들의 위치를 정하는 방법은 여러가지 있는데, 일반적인 상황에서 각각의 요소들이 배치되는 순서를 normal-flow 라고 한다. 이런식으로 블록요소들은 기본적으로 위에서 아래로 배치되고 인라인요소들은 왼쪽부터 시작해 오른쪽으로 배치된다. BFC &amp; IFCnormal flow에는 두가지 배치 방식이 있는데 그중 한가지가 Block Formatting Context(BFC) 그리고 Inline Formatting Context(IFC) 다. BFC는 BFC 영역에 포함된 요소들을 세로로 배치할수 있도록 도와주는 역활을 하고 IFC 는 가로로 배치할수 있게 해준다. BFC는 레이아웃 안의 미니 레이아웃이라고 생각하면 될거 같다. BFC가 생성 되면 내부의 모든 요소들은 이 Block Context안에 속하게 된다. 이런 특성때문에 float된 요소들의 레이아웃을 잡을때 아직까지도 많이 사용하고 있다. BFC 와 float보통 아래와 같이 텍스트 옆에 요소가 float된 레이아웃을 만든다면 이런 결과가 나올거다. See the Pen dyXNqPq by Min Gee (@minki607) on CodePen. 이렇게 보면 아무 문제 없어 보이지만 만약 텍스트가 지금보다 적다면 어떨까? See the Pen BazpOKa by Min Gee (@minki607) on CodePen. 부모요소인 outer가 float된 요소를 담지못하는걸 볼수 있다. 이걸 해결해주기 위해 부모요소에게 overflow:hidden(또는 auto) 를 주며 outer요소를 BFC로 명시해주는거다. MDN에 따르면 다음에 경우 BFC가 생성된다고 한다. html root 태그 (body 태그는 만들어지지 않는다) none을 제외한 float position: fixed, absolute display: inline-block, table, table-cell, table-caption overflow: visible을 제외한 모든 값 display: flow-root (일부 브라우저만 작동) display: flex, inline-flex, grid, inline-grid BFC가 생성되면 다음과 같이 동작하는걸 볼수 있다. See the Pen LYZxJWg by Min Gee (@minki607) on CodePen. 짧은 텍스트임에도 불구하고 float된 요소의 높이가 부모요소에게 인식이 되며 담긴걸 볼수 있다. BFC에 또 다른 특성으로는 마진 병합(margin collapsion)을 방지 할수 있다는 것이다. 마진 병합은 요소들의 마진값이 겹칠 경우 더 큰 마진만 적용되는 현상을 일컫는다. 예를들어 아래에 예제를 보면 See the Pen vYKgzVB by Min Gee (@minki607) on CodePen. .p 에 마진을 20px 줬음에도 텍스트영역으로 표시된 위 아래에 마진 병합현상이 일어나 마진이 들어가지 않은걸 볼수 있다. 여기서 outer영역을 bfc로 생성하면 마진 병합이 일어나지 않고 동일한 마진이 상하좌우로 주어진 것을 볼수 있다. See the Pen wvWgERo by Min Gee (@minki607) on CodePen. 사실 예전에는 개념을 이해하기 보단 그냥 작동되는법만 찾아 문제를 해결만 하려다보니 이런 용어들은 그냥 대수롭지 않게 지나쳤던거 같다. 그냥 overflow: hidden 을 주니 문제가 해결 됐고 그래서 더 이상 깊게 이해하려 하지 않았던거 같다. 이제라도 다시 개념들을 하나하나 배워보면서 전에 했던 방식이 왜 그렇게 작동했는지 알게되는거 같아 다행이다. 참고 자료들 Block formatting context - MDN WEB DOCSUnderstanding-CSS-LAYOUT - SmashingmagazineCSS 바로 알기 - Bono’s Blog","link":"/2020/10/25/BFC%EB%9E%80%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80/"},{"title":"Git 최초설정 및 사용해보기","text":"Git 설치후 사용하기오늘은 git를 사용법을 다시한번 복습해보았다.필자는 macOS를 사용하고 있었기에 별도의 설치는 필요없었지만윈도우라면 여기서 git을 깔고 진행하면 된다. 설치 완료후 terminal(맥)이나 git bash(윈도우)에서 버전 체크를 해보자 1$ git --version git version 2.20.1 (Apple Git-117)(버전은 다를수 있지만 이런식으로 뜨면 준비완료) config 정보 입력/변경이제 사용자이름과 이메일주소를 입력해보자. 이정보는 Github의 유저이름과 이메일 주소와는 무관하다 (물론 같아도 상관없지만).Git을 통해 커밋 할때마다 이 정보가 사용되고 github에 이 내용이 표시가 된다. 12$ git config --global user.name &quot;내 유저이름&quot;$ git config --global user.email &quot;내 이메일 주소&quot; 정상적으로 적용됐는지 확인해보자. 1$ git config --list 123user.name= 내 유저이름user.email= 내 이메일 주소...추가적인 정보들 만약 수정이 필요하면 아래 명령어 입력후 다시 입력을 해주면 된다. 123git config --unset --global user.name 또는 git config --unset --global user.email 본격적으로 GIT 활용하기프로젝트를 시작하는 방법 두가지 $ git init - 로컬 작업공간에서 시작해 문서/소스코드를 순차적으로 내보내기 $ git clone - github에서 remote repository 생성후 로컬 작업공간으로 클론 ⚠️ github 계정이 없다면 Github에서 계정 생성후 진행 git init 프로젝트 폴더 생성하기(이미 진행중인 프로젝트가 있다면 cd를 통해 디렉토리 변경) 12$ mkdir first-rep$ cd first-repo $ git init 명령으로 local repository로서 역할을 시작 (initialization) github에서 새로운 remote repository 생성후, 주소 복사 현재 작업공간에 remote repo 주소 추가 1$ git remote add origin 복사한주소 $ git remote get-url origin를 통해 주소 등록 여부 확인 빈 프로젝트면 $ touch README.md로 마크다운 파일 추가 프로젝트 상태확인 1$ git status untracked files: README.md 또는 git init 전에 파일들이 나열되어 있을것 $ git add README.md 또는 파일이 여러개일 경우 $ git add .를 사용해workspace에서 staging area로 이동 $ git commit -m &quot;메세지 내용&quot;을 입력하여 Commit message 작성커밋 방식은 Conventional commits 참조 ⚠️git commit -m을 사용해 커밋 메세지를 작성하면 수정하기 어려워 보통 텍스트 에디터를 설정하여 작성한다. 12$ git config --global core.editor &quot;vim&quot;$ git commit vim이 실행되면 i 를 눌러 편집모드(insert mode)로 들어간뒤 제목과 상세내용을 적어주면 된다. docs: 커밋 제목 **1. 커밋 메세지 상세내용1 ** **2. 커밋 메세지 상세내용2 ** # Please enter the commit message for your changes. Lines starting # with ‘#’ will be ignored, and an empty message aborts the commit. 작성후 :wq 를 입력하면 저장후 커밋 q! 를 입력하면 취소. 첫 push작업이라면 $ git push -u origin master를 이용해 remote repo로 push.이후에는 $ git push -u origin master 사용 새로운 파일, 변동사항이 있을때마다 7 ~ 10 반복 git clone github에서 remote repository를 LICENSE, README.md, .gitignore 등의 파일과 함께 생성 Clone or Download 버튼 클릭후 https 주소 복사 $ git clone 복사한주소 를 입력하여 local repository를 생성 새 파일을 만들거나 기존의 파일들 변경 $ git status로 프로젝트 상태확인 $ git add 파일이름 또는 $ git add .를 사용해 staging area에 추가 $ git commit으로 커밋 (방법은 git init 9번 참조) $ git push origin master로 변동사항 remote repository에 적용 변동사항 있을때마다 5~8번 반복하여 버전관리","link":"/2020/10/17/Git-%EC%B5%9C%EC%B4%88%EC%84%A4%EC%A0%95-%EB%B0%8F-%EC%82%AC%EC%9A%A9%ED%95%B4%EB%B3%B4%EA%B8%B0/"}],"tags":[{"name":"BFC","slug":"BFC","link":"/tags/BFC/"},{"name":"CSS rendering","slug":"CSS-rendering","link":"/tags/CSS-rendering/"},{"name":"layout","slug":"layout","link":"/tags/layout/"},{"name":"git","slug":"git","link":"/tags/git/"},{"name":"git config","slug":"git-config","link":"/tags/git-config/"}],"categories":[{"name":"HTML&#x2F;CSS","slug":"HTML-CSS","link":"/categories/HTML-CSS/"},{"name":"CSS","slug":"HTML-CSS/CSS","link":"/categories/HTML-CSS/CSS/"},{"name":"git","slug":"git","link":"/categories/git/"}]}